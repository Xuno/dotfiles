snippet pragma "Compiler pragma" !b
{-# $1 #-}
endsnippet

snippet as "Qualified import" !b
import qualified ${1:Data.Map} as ${2:M}
endsnippet

snippet class "Type class definition" !b
class ${1:Num} ${2:a} where
	$0
endsnippet

snippet instance "Instance definition" !b
instance ${1:Num} ${2:a} where
	$0
endsnippet

snippet => "Type constraint" !
(${1:Num} ${2:a}) => ${3:$2}
endsnippet

snippet func "Function definition" !b
-- | ${4:Documentation for $1}
$1 :: ${3:Type}
${1:name} ${2:args} = ${0:error "undefined: $1"}
endsnippet

snippet def "Value definition" !b
-- | ${3:Documentation for $1}
$1 :: ${2:Type}
${1:name} = ${0:error "undefined: $1"}
endsnippet

snippet \ "Lambda" !w
\\${1:args} -> ${2:expression}
endsnippet

snippet if "Boolean conditional" !w
if ${1:condition} then ${2:true} else ${3:false}
endsnippet

snippet case "Pattern match" !w
case ${1:scrutinee} of
	${2:pattern} -> ${0:expression}
endsnippet

snippet qq "Quasi quote" !w
[${1:quoter}| ${0:content} |]
endsnippet

snippet | "Guard" !
| ${1:predicate} = ${2:undefined}
endsnippet
