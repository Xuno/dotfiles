snippet pragma "Compiler pragma" !b
{-# $1 #-}
endsnippet

snippet as "Qualified import" !b
import qualified ${1:Module} as ${0:Alias}
endsnippet

snippet class "Type class definition" !b
class ${1:Name} where
	$0
endsnippet

snippet instance "Instance definition" !b
instance ${1:Class} ${2:Type} where
	$0
endsnippet

snippet :: "Type signature" !b
${1:name} :: ${2:Type}
endsnippet

snippet => "Class constraint" !w
${1:Class} ${2:variable} => $2
endsnippet

snippet func "Function definition" !b
-- | ${4:Documentation for $1}
$1 :: ${3:Type}
${1:name} ${2:args} = ${0:error "undefined: $1"}
endsnippet

snippet def "Value definition" !b
-- | ${3:Documentation for $1}
$1 :: ${2:Type}
${1:name} = ${0:error "undefined: $1"}
endsnippet

snippet \ "Lambda" !w
\\${1:args} -> ${2:expression}
endsnippet

snippet if "Boolean conditional" !w
if ${1:condition} then ${2:true} else ${3:false}
endsnippet

snippet case "Pattern match" !w
case ${1:scrutinee} of
	${2:pattern} -> ${3:expression}
endsnippet

snippet qq "Quasi quote" !w
[${1:quoter}| ${0:content} |]
endsnippet
